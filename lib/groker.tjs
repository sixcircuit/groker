 
var _ = require('dry-underscore');

var project_root = _.path.fun(_.path.normalize(__dirname) + "/..");

function groker(config){
    this.config = config || {};
}

_.hook(groker.prototype);

groker.prototype.processor = _.hook.fun("processor");

groker.prototype.dates = function(flag){
    this.unhook("processor", this._date_groker);
    if(flag){ this.hook("processor", this._date_groker); }
};

groker.prototype.grok = function(rows, options, callback){
    var self = this;

    if(_.is_function(options)){
        callback = options;
        options = {};
    }
    
    var global = {};

    _.each.async(rows, function(row, i, next){
        row.grok = { };
        self.bite("processor", [row, options, global], function(err){
            if(err){ return callback(err); }
            else{ next(); }
        });
    }, callback); 
};

groker.prototype._date_groker = function(next, row, options, global){

    var origin = null;
    var date_key = null;
    var is_now = false;

    if(global.date){
        origin = global.date.origin;
        date_key = global.date.key;
        is_now = global.date.is_now;
    }else{

        options = options.date || {};

        if(_.moment.isMoment(options)){
            origin = options;
            options = {};
        }else if(_.is_string(options)){
            origin = _.moment(options);
            options = {};
        }else if(!options.origin){
            origin = _.moment();
            is_now = true;
        }

        if(_.is_string(options.key)){
            date_key = options.key;
        }else{
            date_key = 'date';
        }
    }

    global.date = {
        key: date_key,
        origin: origin,
        is_now: is_now
    };

    var row_date = row[date_key] || null;
    var row_moment = _.moment(row_date);

    if(!row_date || !row_moment.isValid()){
        row.grok.date = { invalid: true };
        return next();
    }

    var day_diff = row_moment.diff(origin, 'days');

    function abs_quarter(moment){ return(((moment.year() - 1) * 4) + moment.quarter()); }

    // _.p("abs_quarter 0: ", abs_quarter(_.iso_date("0001-01-01")))
    // _.p("abs_quarter 1900: ", abs_quarter(_.iso_date("1900-01-01")))

    row.grok.date = {
        moment: row_moment,
        origin: origin,
        now: is_now === true,
        relative: {
            days: day_diff,
            rolling: {
                7: _.floor(day_diff / 7),
                14: _.floor(day_diff / 14),
                21: _.floor(day_diff / 21),
                28: _.floor(day_diff / 28),
            },
            quarters: abs_quarter(row_moment) - abs_quarter(origin),
            years: row_moment.diff(origin, 'years') 
        },
        fixed: {
            day: row_moment.dayOfYear(),
            week_day: row_moment.day(), // 0-6, sunday is always 0
            month: row_moment.month(), // 0-11
            quarter: row_moment.quarter(), // 1-4
            year: row_moment.year(),
        }
    };

    return next();
};

module.exports = groker;
